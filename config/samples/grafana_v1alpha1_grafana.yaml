apiVersion: grafana.com/v1alpha1
kind: Grafana
metadata:
  name: grafana-sample
spec:
  # Default values copied from <project_dir>/helm-charts/enterprise-logs/values.yaml
  adminApi:
    affinity: {}
    annotations: {}
    env: []
    extraArgs: {}
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    labels: {}
    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    nodeSelector: {}
    persistence:
      subPath: null
    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    replicas: 1
    resources: {}
    securityContext:
      runAsGroup: 10001
      runAsNonRoot: true
      runAsUser: 10001
    service:
      annotations: {}
      labels: {}
    strategy:
      type: RollingUpdate
    terminationGracePeriodSeconds: 60
    tolerations: []
  compactor:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: target
                operator: In
                values:
                - compactor
            topologyKey: kubernetes.io/hostname
          weight: 100
    annotations: {}
    env: []
    extraArgs: {}
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    labels: {}
    livenessProbe:
      failureThreshold: 20
      httpGet:
        path: /ready
        port: http-metrics
        scheme: HTTP
      initialDelaySeconds: 180
      periodSeconds: 30
      successThreshold: 1
      timeoutSeconds: 1
    nodeSelector: {}
    persistentVolume:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      size: 2Gi
      subPath: ""
    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 60
    replicas: 1
    resources: {}
    securityContext:
      fsGroup: 10001
      runAsGroup: 10001
      runAsNonRoot: true
      runAsUser: 10001
    service:
      annotations: {}
      labels: {}
    strategy:
      type: RollingUpdate
    terminationGracePeriodSeconds: 300
    tolerations: []
  config:
    admin_client:
      storage:
        s3:
          access_key_id: enterprise-logs
          bucket_name: enterprise-logs-admin
          endpoint: '{{ include "loki.fullname" . }}-minio:9000'
          insecure: true
          secret_access_key: supersecret
        type: s3
    auth:
      type: enterprise
    auth_enabled: true
    cluster_name: '{{ .Release.Name }}'
    compactor:
      shared_store: s3
      working_directory: /data/boltdb-shipper-compactor
    distributor:
      ring:
        kvstore:
          store: memberlist
    frontend:
      compress_responses: true
      log_queries_longer_than: 10s
      tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100
    frontend_worker:
      frontend_address: '{{ include "loki.queryFrontendFullname" . }}:9095'
    ingester:
      chunk_block_size: 262144
      chunk_encoding: snappy
      chunk_idle_period: 30m
      chunk_retain_period: 1m
      lifecycler:
        num_tokens: 512
        ring:
          kvstore:
            store: memberlist
          replication_factor: 3
    ingester_client:
      grpc_client_config:
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
    license:
      path: /etc/enterprise-logs/license/license.jwt
    limits_config:
      enforce_metric_name: false
      max_cache_freshness_per_query: 10m
      reject_old_samples: true
      reject_old_samples_max_age: 168h
    memberlist:
      join_members:
      - '{{ include "loki.fullname" . }}-memberlist'
    querier:
      query_ingesters_within: 12h
    query_range:
      align_queries_with_step: true
      cache_results: true
      results_cache:
        cache:
          memcached:
            expiration: 1h
          memcached_client:
            timeout: 1s
      split_queries_by_interval: 24h
    ruler:
      enable_alertmanager_discovery: false
      enable_api: true
      enable_sharding: true
      ring:
        kvstore:
          store: memberlist
      rule_path: /var/loki
      storage:
        s3:
          access_key_id: enterprise-logs
          bucketnames: enterprise-logs-ruler
          endpoint: '{{ include "loki.fullname" . }}-minio:9000'
          insecure: true
          s3forcepathstyle: true
          secret_access_key: supersecret
        type: s3
    schema_config:
      configs:
      - from: "2021-01-01"
        index:
          period: 24h
          prefix: index_
        object_store: aws
        schema: v11
        store: boltdb-shipper
    server:
      grpc_listen_port: 9095
      http_listen_port: 3100
    storage_config:
      aws:
        access_key_id: enterprise-logs
        bucketnames: enterprise-logs-tsdb
        endpoint: '{{ include "loki.fullname" . }}-minio:9000'
        insecure: true
        s3forcepathstyle: true
        secret_access_key: supersecret
      boltdb_shipper:
        active_index_directory: /var/loki/index
        cache_location: /var/loki/cache
        cache_ttl: 24h
        index_gateway_client:
          server_address: dns:///{{ include "loki.indexGatewayFullname" . }}:9095
        shared_store: s3
  externalConfigName: enterprise-logs-config
  externalConfigVersion: "0"
  externalLicenseName: enterprise-logs-license
  externalLicenseVersion: "0"
  fullnameOverride: null
  gateway:
    affinity: {}
    annotations: {}
    env: []
    extraArgs: {}
    extraContainers: []
    extraVolumeMounts: []
    extraVolumes: []
    initContainers: []
    labels: {}
    livenessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    nodeSelector: {}
    persistence:
      subPath: null
    readinessProbe:
      httpGet:
        path: /ready
        port: http-metrics
      initialDelaySeconds: 45
    replicas: 1
    resources: {}
    securityContext:
      fsGroup: 10001
      runAsGroup: 10001
      runAsNonRoot: true
      runAsUser: 10001
    service:
      annotations: {}
      labels: {}
    strategy:
      type: RollingUpdate
    terminationGracePeriodSeconds: 60
    tolerations: []
    useDefaultProxyURLs: true
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: grafana/enterprise-logs
    tag: v1.1.0
  license:
    contents: NOTAVALIDLICENSE
  loki-distributed:
    compactor:
      enabled: false
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts: []
      extraVolumes: []
      image: {}
      nodeSelector: {}
      persistence:
        enabled: false
        size: 10Gi
      podAnnotations: {}
      priorityClassName: null
      resources: {}
      serviceAccount:
        annotations: {}
        automountServiceAccountToken: true
        create: false
        imagePullSecrets: []
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    distributor:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.distributorSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.distributorSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPUUtilizationPercentage: 60
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: null
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    fullnameOverride: null
    gateway:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.gatewaySelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.gatewaySelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPUUtilizationPercentage: 60
      basicAuth:
        enabled: false
        htpasswd: '{{ htpasswd (required "''gateway.basicAuth.username'' is required"
          .Values.gateway.basicAuth.username) (required "''gateway.basicAuth.password''
          is required" .Values.gateway.basicAuth.password) }}'
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      deploymentStrategy:
        type: RollingUpdate
      enabled: false
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts: []
      extraVolumes: []
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: nginxinc/nginx-unprivileged
        tag: 1.19-alpine
      ingress:
        annotations: {}
        enabled: false
        hosts:
        - host: gateway.loki.example.com
          paths:
          - path: /
        tls:
        - hosts:
          - gateway.loki.example.com
          secretName: loki-gateway-tls
      nginxConfig:
        file: |
          worker_processes  5;  ## Default: 1
          error_log  /dev/stderr;
          pid        /tmp/nginx.pid;
          worker_rlimit_nofile 8192;
  
          events {
            worker_connections  4096;  ## Default: 1024
          }
  
          http {
            client_body_temp_path /tmp/client_temp;
            proxy_temp_path       /tmp/proxy_temp_path;
            fastcgi_temp_path     /tmp/fastcgi_temp;
            uwsgi_temp_path       /tmp/uwsgi_temp;
            scgi_temp_path        /tmp/scgi_temp;
  
            default_type application/octet-stream;
            log_format   {{ .Values.gateway.nginxConfig.logFormat }}
  
            {{- if .Values.gateway.verboseLogging }}
            access_log   /dev/stderr  main;
            {{- else }}
  
            map $status $loggable {
              ~^[23]  0;
              default 1;
            }
            access_log   /dev/stderr  main  if=$loggable;
            {{- end }}
  
            sendfile     on;
            tcp_nopush   on;
            resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};
  
            {{- with .Values.gateway.nginxConfig.httpSnippet }}
            {{ . | nindent 2 }}
            {{- end }}
  
            server {
              listen             8080;
  
              {{- if .Values.gateway.basicAuth.enabled }}
              auth_basic           "Loki";
              auth_basic_user_file /etc/nginx/secrets/.htpasswd;
              {{- end }}
  
              location = / {
                return 200 'OK';
                auth_basic off;
              }
  
              location = /api/prom/push {
                proxy_pass       http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              }
  
              location = /api/prom/tail {
                proxy_pass       http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
              }
  
              location ~ /api/prom/.* {
                proxy_pass       http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              }
  
              location = /loki/api/v1/push {
                proxy_pass       http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              }
  
              location = /loki/api/v1/tail {
                proxy_pass       http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
              }
  
              location ~ /loki/api/.* {
                proxy_pass       http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              }
  
              {{- with .Values.gateway.nginxConfig.serverSnippet }}
              {{ . | nindent 4 }}
              {{- end }}
            }
          }
        httpSnippet: ""
        logFormat: |-
          main '$remote_addr - $remote_user [$time_local]  $status '
                  '"$request" $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';
        serverSnippet: ""
      nodeSelector: {}
      podAnnotations: {}
      podSecurityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 101
      priorityClassName: null
      readinessProbe:
        httpGet:
          path: /
          port: http
        initialDelaySeconds: 15
        timeoutSeconds: 1
      replicas: 1
      resources: {}
      service:
        annotations: {}
        labels: {}
        port: 80
        type: ClusterIP
      terminationGracePeriodSeconds: 30
      tolerations: []
      verboseLogging: true
    global:
      clusterDomain: cluster.local
      dnsNamespace: kube-system
      dnsService: kube-dns
      image: {}
      priorityClassName: null
    imagePullSecrets: []
    indexGateway:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.indexGatewaySelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.indexGatewaySelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      persistence:
        enabled: true
        size: 10Gi
        storageClass: null
      podAnnotations: {}
      priorityClassName: null
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 300
      tolerations: []
    ingester:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.ingesterSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.ingesterSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      persistence:
        enabled: false
        size: 10Gi
      podAnnotations: {}
      priorityClassName: null
      replicas: 3
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 300
      tolerations: []
    loki:
      config: |
        auth_enabled: false
  
        server:
          http_listen_port: 3100
  
        distributor:
          ring:
            kvstore:
              store: memberlist
  
        memberlist:
          join_members:
            - {{ include "loki.fullname" . }}-memberlist
  
        ingester:
          lifecycler:
            ring:
              kvstore:
                store: memberlist
              replication_factor: 1
          chunk_idle_period: 30m
          chunk_block_size: 262144
          chunk_encoding: snappy
          chunk_retain_period: 1m
          max_transfer_retries: 0
  
        limits_config:
          enforce_metric_name: false
          reject_old_samples: true
          reject_old_samples_max_age: 168h
          max_cache_freshness_per_query: 10m
  
        schema_config:
          configs:
            - from: 2020-09-07
              store: boltdb-shipper
              object_store: filesystem
              schema: v11
              index:
                prefix: loki_index_
                period: 24h
  
        storage_config:
          boltdb_shipper:
            shared_store: filesystem
            active_index_directory: /var/loki/index
            cache_location: /var/loki/cache
            cache_ttl: 168h
            {{- if .Values.indexGateway.enabled }}
            index_gateway_client:
              server_address: dns:///{{ include "loki.indexGatewayFullname" . }}:9095
            {{- end }}
          filesystem:
            directory: /var/loki/chunks
  
        chunk_store_config:
          max_look_back_period: 0s
  
        table_manager:
          retention_deletes_enabled: false
          retention_period: 0s
  
        query_range:
          align_queries_with_step: true
          max_retries: 5
          split_queries_by_interval: 15m
          cache_results: true
          results_cache:
            cache:
              enable_fifocache: true
              fifocache:
                max_size_items: 1024
                validity: 24h
  
        frontend_worker:
          frontend_address: {{ include "loki.queryFrontendFullname" . }}:9095
  
        frontend:
          log_queries_longer_than: 5s
          compress_responses: true
          tail_proxy_url: http://{{ include "loki.querierFullname" . }}:3100
  
        compactor:
          shared_store: filesystem
  
        ruler:
          storage:
            type: local
            local:
              directory: /etc/loki/rules
          ring:
            kvstore:
              store: memberlist
          rule_path: /tmp/loki/scratch
          alertmanager_url: https://alertmanager.xx
          external_url: https://alertmanager.xx
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      existingSecretForConfig: enterprise-logs-config
      image:
        pullPolicy: IfNotPresent
        pullSecrets: []
        registry: docker.io
        repository: grafana/enterprise-logs
        tag: v1.1.0
      podAnnotations: {}
      podSecurityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      readinessProbe:
        httpGet:
          path: /ready
          port: http
        initialDelaySeconds: 30
        timeoutSeconds: 1
      revisionHistoryLimit: 10
    memcached:
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: memcached
        tag: 1.6.7-alpine
      podSecurityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
    memcachedChunks:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.memcachedChunksSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.memcachedChunksSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: false
      extraArgs:
      - -I 32m
      extraEnv: []
      extraEnvFrom: []
      nodeSelector: {}
      podAnnotations: {}
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    memcachedExporter:
      enabled: false
      image:
        pullPolicy: IfNotPresent
        registry: docker.io
        repository: prom/memcached-exporter
        tag: v0.6.0
      resources: {}
    memcachedFrontend:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: false
      extraArgs:
      - -I 32m
      extraEnv: []
      extraEnvFrom: []
      nodeSelector: {}
      podAnnotations: {}
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    memcachedIndexQueries:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: false
      extraArgs:
      - -I 32m
      extraEnv: []
      extraEnvFrom: []
      nodeSelector: {}
      podAnnotations: {}
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    memcachedIndexWrites:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: false
      extraArgs:
      - -I 32m
      extraEnv: []
      extraEnvFrom: []
      nodeSelector: {}
      podAnnotations: {}
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    nameOverride: enterprise-logs
    networkPolicy:
      alertmanager:
        namespaceSelector: {}
        podSelector: {}
        port: 9093
      discovery:
        namespaceSelector: {}
        podSelector: {}
      enabled: false
      externalStorage:
        cidrs: []
        ports: []
      ingress:
        namespaceSelector: {}
        podSelector: {}
      metrics:
        cidrs: []
        namespaceSelector: {}
        podSelector: {}
    prometheusRule:
      annotations: {}
      enabled: false
      groups: []
      labels: {}
    querier:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.querierSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.querierSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPUUtilizationPercentage: 60
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      persistence:
        enabled: true
        size: 10Gi
        storageClass: null
      podAnnotations: {}
      priorityClassName: null
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    queryFrontend:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.queryFrontendSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.queryFrontendSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      autoscaling:
        enabled: false
        maxReplicas: 3
        minReplicas: 1
        targetCPUUtilizationPercentage: 60
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: null
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
    rbac:
      pspEnabled: true
    ruler:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.rulerSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.rulerSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      directories: {}
      enabled: true
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts:
      - mountPath: /etc/enterprise-logs/license
        name: license
      extraVolumes:
      - name: license
        secret:
          secretName: enterprise-logs-license
      image: {}
      nodeSelector: {}
      persistence:
        enabled: false
        size: 10Gi
      podAnnotations: {}
      priorityClassName: null
      replicas: 1
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 300
      tolerations: []
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      imagePullSecrets: []
    serviceMonitor:
      annotations: {}
      enabled: false
      labels: {}
      namespaceSelector: {}
      relabelings: []
      scheme: http
    tableManager:
      affinity: |
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  {{- include "loki.tableManagerSelectorLabels" . | nindent 10 }}
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    {{- include "loki.tableManagerSelectorLabels" . | nindent 12 }}
                topologyKey: failure-domain.beta.kubernetes.io/zone
      enabled: false
      extraArgs: []
      extraEnv: []
      extraEnvFrom: []
      extraVolumeMounts: []
      extraVolumes: []
      image: {}
      nodeSelector: {}
      podAnnotations: {}
      priorityClassName: null
      resources: {}
      serviceLabels: {}
      terminationGracePeriodSeconds: 30
      tolerations: []
  minio:
    DeploymentUpdate:
      maxSurge: 100%
      maxUnavailable: 0
      type: RollingUpdate
    StatefulSetUpdate:
      updateStrategy: RollingUpdate
    accessKey: enterprise-logs
    affinity: {}
    azuregateway:
      enabled: false
      replicas: 4
    bucketRoot: ""
    buckets:
    - name: enterprise-logs-tsdb
      policy: none
      purge: false
    - name: enterprise-logs-admin
      policy: none
      purge: false
    - name: enterprise-logs-ruler
      policy: none
      purge: false
    certsPath: /etc/minio/certs/
    clusterDomain: cluster.local
    configPathmc: /etc/minio/mc/
    defaultBucket:
      enabled: false
      name: bucket
      policy: none
      purge: false
    drivesPerNode: 1
    enabled: true
    environment: {}
    etcd:
      clientCert: ""
      clientCertKey: ""
      corednsPathPrefix: ""
      endpoints: []
      pathPrefix: ""
    existingSecret: ""
    extraArgs: []
    fullnameOverride: ""
    gcsgateway:
      enabled: false
      gcsKeyJson: ""
      projectId: ""
      replicas: 4
    global: {}
    helmKubectlJqImage:
      pullPolicy: IfNotPresent
      repository: bskim45/helm-kubectl-jq
      tag: 3.1.0
    image:
      pullPolicy: IfNotPresent
      repository: minio/minio
      tag: RELEASE.2020-12-03T05-49-24Z
    imagePullSecrets: []
    ingress:
      annotations: {}
      enabled: false
      hosts:
      - chart-example.local
      labels: {}
      path: /
      tls: []
    makeBucketJob:
      resources:
        requests:
          memory: 128Mi
      securityContext:
        enabled: false
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
    mcImage:
      pullPolicy: IfNotPresent
      repository: minio/mc
      tag: RELEASE.2020-11-25T23-04-07Z
    metrics:
      serviceMonitor:
        additionalLabels: {}
        enabled: false
        relabelConfigs: {}
    mode: standalone
    mountPath: /export
    nameOverride: ""
    nasgateway:
      enabled: false
      replicas: 4
    networkPolicy:
      allowExternal: true
      enabled: false
    nodeSelector: {}
    persistence:
      VolumeName: ""
      accessMode: ReadWriteOnce
      enabled: true
      existingClaim: ""
      size: 5Gi
      storageClass: ""
      subPath: ""
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: 1
    podLabels: {}
    priorityClassName: ""
    replicas: 4
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
    s3gateway:
      accessKey: ""
      enabled: false
      replicas: 4
      secretKey: ""
      serviceEndpoint: ""
    secretKey: supersecret
    securityContext:
      enabled: true
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
    service:
      annotations: {}
      externalIPs: []
      nodePort: 32000
      port: 9000
      type: ClusterIP
    serviceAccount:
      create: true
    tls:
      certSecret: ""
      enabled: false
      privateKey: private.key
      publicCrt: public.crt
    tolerations: []
    trustedCertsSecret: ""
    updatePrometheusJob:
      securityContext:
        enabled: false
        fsGroup: 1000
        runAsGroup: 1000
        runAsUser: 1000
    zones: 1
  nameOverride: null
  serviceAccount:
    create: true
  tokengen:
    annotations: {}
    enable: true
    env: []
    extraArgs: {}
    extraVolumeMounts: []
    extraVolumes: []
    labels: {}
    securityContext:
      fsGroup: 10001
      runAsGroup: 10001
      runAsNonRoot: true
      runAsUser: 10001
  useExternalConfig: false
  useExternalLicense: false
  
  
